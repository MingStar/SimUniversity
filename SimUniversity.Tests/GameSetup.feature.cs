// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.235
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MingStar.SimUniversity.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Test the set up phase of the game")]
    public partial class TestTheSetUpPhaseOfTheGameFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GameSetup.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Test the set up phase of the game", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("010 Set up the Catan beginnger\'s game")]
        public virtual void _010SetUpTheCatanBeginngerSGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("010 Set up the Catan beginnger\'s game", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.When("the dice roll is predefined to 5");
#line 5
 testRunner.And("I set up the Catan beginner\'s game");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "University",
                        "Score",
                        "Campuses",
                        "Links",
                        "Students"});
            table1.AddRow(new string[] {
                        "Red",
                        "2",
                        "(0, 3, bl); (0, 2, r)",
                        "(0, 3, bl); (0, 2, tr)",
                        "b"});
            table1.AddRow(new string[] {
                        "Blue",
                        "2",
                        "(0, 0, tl); (1, 0, r)",
                        "(0, 1, bl); (1, 0, br)",
                        "o"});
            table1.AddRow(new string[] {
                        "White",
                        "2",
                        "(-1, 3, l); (2, 0, tl)",
                        "(-1, 3, tl); (2, 0, tl)",
                        ""});
            table1.AddRow(new string[] {
                        "Orange",
                        "2",
                        "(2, 2, l); (1, 3, tl)",
                        "(2, 2, bl); (1, 3, tl)",
                        ""});
#line 6
 testRunner.Then("the university information should be the following:", ((string)(null)), table1);
#line 12
 testRunner.And("the current game phase should be \'Play\'");
#line 13
 testRunner.And("the current university of the turn should be \'Red\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("030 build a link")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void _030BuildALink()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("030 build a link", new string[] {
                        "ignore"});
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.When("the university build an internet link at (");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
