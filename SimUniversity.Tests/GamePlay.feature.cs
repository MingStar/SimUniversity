// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.235
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MingStar.SimUniversity.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Game Play")]
    public partial class GamePlayFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GamePlay.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Game Play", "* build internet link\r\n* try start up\r\n*", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("010 Set up the Catan beginnger\'s game")]
        public virtual void _010SetUpTheCatanBeginngerSGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("010 Set up the Catan beginnger\'s game", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("the dice roll is predefined to 5");
#line 8
 testRunner.When("I set up the Catan beginner\'s game");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "University",
                        "Score",
                        "Campuses",
                        "Links",
                        "Students"});
            table1.AddRow(new string[] {
                        "Red",
                        "2",
                        "(0, 3, bl); (0, 2, r)",
                        "(0, 3, bl); (0, 2, tr)",
                        "w, b, s, g"});
            table1.AddRow(new string[] {
                        "Blue",
                        "2",
                        "(0, 0, tl); (1, 0, r)",
                        "(0, 1, bl); (1, 0, br)",
                        "2o, b, s"});
            table1.AddRow(new string[] {
                        "White",
                        "2",
                        "(-1, 3, l); (2, 0, tl)",
                        "(-1, 3, tl); (2, 0, tl)",
                        "o, w, s"});
            table1.AddRow(new string[] {
                        "Orange",
                        "2",
                        "(2, 2, l); (1, 3, tl)",
                        "(2, 2, bl); (1, 3, tl)",
                        "g, s, w"});
#line 9
 testRunner.Then("the university information should be the following:", ((string)(null)), table1);
#line 15
 testRunner.And("the current game phase should be \'Play\'");
#line 16
 testRunner.And("the current university of the turn should be \'Red\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("020 build a internet link")]
        public virtual void _020BuildAInternetLink()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("020 build a internet link", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.When("the university build an internet link at (0, 3, tl)");
#line 20
 testRunner.Then("a red internet link should be at (0, 3, tl)");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "University",
                        "Score",
                        "Links",
                        "Students"});
            table2.AddRow(new string[] {
                        "Red",
                        "2",
                        "(0, 3, bl); (0, 2, tr); (0, 3, tl)",
                        "s, g"});
            table2.AddRow(new string[] {
                        "Blue",
                        "2",
                        "(0, 1, bl); (1, 0, br)",
                        "2o, b, s"});
            table2.AddRow(new string[] {
                        "White",
                        "2",
                        "(-1, 3, tl); (2, 0, tl)",
                        "o, w, s"});
            table2.AddRow(new string[] {
                        "Orange",
                        "2",
                        "(2, 2, bl); (1, 3, tl)",
                        "g, s, w"});
#line 21
 testRunner.And("the university information should be the following:", ((string)(null)), table2);
#line 27
 testRunner.And("the current game phase should be \'Play\'");
#line 28
 testRunner.And("the current university of the turn should be \'Red\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("030 End turn")]
        public virtual void _030EndTurn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("030 End turn", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("the dice roll is predefined to 4");
#line 32
 testRunner.When("the turn is ended");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "University",
                        "Students"});
            table3.AddRow(new string[] {
                        "Red",
                        "w, s, g"});
            table3.AddRow(new string[] {
                        "Blue",
                        "2o, b, s"});
            table3.AddRow(new string[] {
                        "White",
                        "o, w, s, b"});
            table3.AddRow(new string[] {
                        "Orange",
                        "g, s, 2w"});
#line 33
 testRunner.Then("the university information should be the following:", ((string)(null)), table3);
#line 39
 testRunner.And("the current university of the turn should be \'Blue\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("040 End turn")]
        public virtual void _040EndTurn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("040 End turn", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("the dice roll is predefined to 6");
#line 43
 testRunner.When("the turn is ended");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "University",
                        "Students"});
            table4.AddRow(new string[] {
                        "Red",
                        "w, s, g, o"});
            table4.AddRow(new string[] {
                        "Blue",
                        "w, 2o, b, s"});
            table4.AddRow(new string[] {
                        "White",
                        "2o, 2w, s, b"});
            table4.AddRow(new string[] {
                        "Orange",
                        "g, s, 2w"});
#line 44
 testRunner.Then("the university information should be the following:", ((string)(null)), table4);
#line 50
 testRunner.And("the current university of the turn should be \'White\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("050 Build a internet link")]
        public virtual void _050BuildAInternetLink()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("050 Build a internet link", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
 testRunner.When("the university build an internet link at (2, 0, t)");
#line 54
 testRunner.Then("a white internet link should be at (2, 0, t)");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "University",
                        "Score",
                        "Links",
                        "Students"});
            table5.AddRow(new string[] {
                        "Red",
                        "2",
                        "(0, 3, bl); (0, 2, tr); (0, 3, tl)",
                        "w, s, g, o"});
            table5.AddRow(new string[] {
                        "Blue",
                        "2",
                        "(0, 1, bl); (1, 0, br)",
                        "w, 2o, b, s"});
            table5.AddRow(new string[] {
                        "White",
                        "2",
                        "(-1, 3, tl); (2, 0, tl); (2, 0, t)",
                        "2o, w, s"});
            table5.AddRow(new string[] {
                        "Orange",
                        "2",
                        "(2, 2, bl); (1, 3, tl)",
                        "g, s, 2w"});
#line 55
 testRunner.And("the university information should be the following:", ((string)(null)), table5);
#line 61
 testRunner.And("the current university of the turn should be \'White\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("060 End turn")]
        public virtual void _060EndTurn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("060 End turn", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.Given("the dice roll is predefined to 8");
#line 65
 testRunner.When("the turn is ended");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "University",
                        "Students"});
            table6.AddRow(new string[] {
                        "Red",
                        "w, s, g, o"});
            table6.AddRow(new string[] {
                        "Blue",
                        "w, 2o, 2b, s"});
            table6.AddRow(new string[] {
                        "White",
                        "2o, w, s"});
            table6.AddRow(new string[] {
                        "Orange",
                        "2g, s, 2w"});
#line 66
 testRunner.Then("the university information should be the following:", ((string)(null)), table6);
#line 72
 testRunner.And("the current university of the turn should be \'Orange\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("070 End turn")]
        public virtual void _070EndTurn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("070 End turn", ((string[])(null)));
#line 74
this.ScenarioSetup(scenarioInfo);
#line 75
 testRunner.Given("the dice roll is predefined to 9");
#line 76
 testRunner.When("the turn is ended");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "University",
                        "Students"});
            table7.AddRow(new string[] {
                        "Red",
                        "w, 2s, g, o"});
            table7.AddRow(new string[] {
                        "Blue",
                        "w, 2o, 2b, s"});
            table7.AddRow(new string[] {
                        "White",
                        "2o, w, 2s"});
            table7.AddRow(new string[] {
                        "Orange",
                        "3g, s, 2w"});
#line 77
 testRunner.Then("the university information should be the following:", ((string)(null)), table7);
#line 83
 testRunner.And("the current university of the turn should be \'Red\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("080 End turn")]
        public virtual void _080EndTurn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("080 End turn", ((string[])(null)));
#line 85
this.ScenarioSetup(scenarioInfo);
#line 86
 testRunner.Given("the dice roll is predefined to 2");
#line 87
 testRunner.When("the turn is ended");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "University",
                        "Students"});
            table8.AddRow(new string[] {
                        "Red",
                        "w, 2s, g, o"});
            table8.AddRow(new string[] {
                        "Blue",
                        "w, 2o, 2b, s, g"});
            table8.AddRow(new string[] {
                        "White",
                        "2o, w, 2s"});
            table8.AddRow(new string[] {
                        "Orange",
                        "3g, s, 2w"});
#line 88
 testRunner.Then("the university information should be the following:", ((string)(null)), table8);
#line 94
 testRunner.And("the current university of the turn should be \'Blue\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("090 Try Start up")]
        public virtual void _090TryStartUp()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("090 Try Start up", ((string[])(null)));
#line 96
this.ScenarioSetup(scenarioInfo);
#line 97
 testRunner.Given("the startup will fail");
#line 98
 testRunner.When("the player found a startup company");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "University",
                        "Students",
                        "Failed Startups"});
            table9.AddRow(new string[] {
                        "Red",
                        "w, 2s, g, o",
                        "0"});
            table9.AddRow(new string[] {
                        "Blue",
                        "w, o, 2b,",
                        "1"});
            table9.AddRow(new string[] {
                        "White",
                        "2o, w, 2s",
                        "0"});
            table9.AddRow(new string[] {
                        "Orange",
                        "3g, s, 2w",
                        "0"});
#line 99
 testRunner.Then("the university information should be the following:", ((string)(null)), table9);
#line 105
 testRunner.And("the current university of the turn should be \'Blue\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("100 End turn")]
        public virtual void _100EndTurn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("100 End turn", ((string[])(null)));
#line 107
this.ScenarioSetup(scenarioInfo);
#line 108
 testRunner.Given("the dice roll is predefined to 10");
#line 109
 testRunner.When("the turn is ended");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "University",
                        "Students"});
            table10.AddRow(new string[] {
                        "Red",
                        "w, 2s, g, o"});
            table10.AddRow(new string[] {
                        "Blue",
                        "w, o, 2b, s"});
            table10.AddRow(new string[] {
                        "White",
                        "2o, w, 2s"});
            table10.AddRow(new string[] {
                        "Orange",
                        "3g, 3s, 2w"});
#line 110
 testRunner.Then("the university information should be the following:", ((string)(null)), table10);
#line 116
 testRunner.And("the current university of the turn should be \'White\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("110 End turn")]
        public virtual void _110EndTurn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("110 End turn", ((string[])(null)));
#line 118
this.ScenarioSetup(scenarioInfo);
#line 119
 testRunner.Given("the dice roll is predefined to 10");
#line 120
 testRunner.When("the turn is ended");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "University",
                        "Students"});
            table11.AddRow(new string[] {
                        "Red",
                        "w, 2s, g, o"});
            table11.AddRow(new string[] {
                        "Blue",
                        "w, o, 2b, 2s"});
            table11.AddRow(new string[] {
                        "White",
                        "2o, w, 2s"});
            table11.AddRow(new string[] {
                        "Orange",
                        "3g, 5s, 2w"});
#line 121
 testRunner.Then("the university information should be the following:", ((string)(null)), table11);
#line 127
 testRunner.And("the current university of the turn should be \'Orange\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("120 Exchange students")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void _120ExchangeStudents()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("120 Exchange students", new string[] {
                        "ignore"});
#line 130
this.ScenarioSetup(scenarioInfo);
#line 131
 testRunner.When("the university exchanges 3 sheep for 1 brick");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "University",
                        "Students"});
            table12.AddRow(new string[] {
                        "Red",
                        "w, 2s, g, o"});
            table12.AddRow(new string[] {
                        "Blue",
                        "w, o, 2b, 2s"});
            table12.AddRow(new string[] {
                        "White",
                        "2o, w, 2s"});
            table12.AddRow(new string[] {
                        "Orange",
                        "3g, 2s, 2w, b"});
#line 132
 testRunner.Then("the university information should be the following:", ((string)(null)), table12);
#line 138
 testRunner.And("the current university of the turn should be \'Orange\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("130 Build an internet link")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void _130BuildAnInternetLink()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("130 Build an internet link", new string[] {
                        "ignore"});
#line 141
this.ScenarioSetup(scenarioInfo);
#line 142
 testRunner.When("the university build an internet link at (0, 3, t)");
#line 143
 testRunner.Then("an Orange internet link should be at (0, 3, t)");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "University",
                        "Score",
                        "Links",
                        "Students"});
            table13.AddRow(new string[] {
                        "Red",
                        "2",
                        "(0, 3, bl); (0, 2, tr); (0, 3, tl)",
                        "w, s, g, o"});
            table13.AddRow(new string[] {
                        "Blue",
                        "2",
                        "(0, 1, bl); (1, 0, br)",
                        "w, o, 2b, 2s"});
            table13.AddRow(new string[] {
                        "White",
                        "2",
                        "(-1, 3, tl); (2, 0, tl); (2, 0, t)",
                        "2o, w, 2s"});
            table13.AddRow(new string[] {
                        "Orange",
                        "2",
                        "(2, 2, bl); (1, 3, tl); (0, 3, t)",
                        "3g, 2s, w"});
#line 144
 testRunner.And("the university information should be the following:", ((string)(null)), table13);
#line 150
 testRunner.And("the current university of the turn should be \'Orange\'");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
